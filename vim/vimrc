set nocompatible
filetype indent plugin on
set autowrite
set autoread
set encoding=utf8
syntax on
set ruler
set rulerformat=%40(%=%t%h%m%r%w%<\ (%n)\ %4.7l,%-7.(%c%V%)\ %P%)
set showmode
set showcmd
set shortmess=aotTWI
set laststatus=0
set display+=lastline,uhex
set scrolloff=3
set lazyredraw
set hlsearch
set showmatch
set matchtime=2
set report=0
set nomore

set completeopt=menuone
let perl_extended_vars=1
let perl_include_pod=1
let perl_sync_dist=1000
set incsearch
set tildeop
set backspace=indent,eol,start
set wildmenu
set wildignore+=.log,.out,.o
set viminfo=!,'1000,f1,/1000,:1000,<1000,@1000,h,n~/.viminfo
set isfname+=:
set wildmode=longest,list,full
set hidden
set vb t_vb=
set ttimeoutlen=50
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set shiftround
set autoindent
set smartindent
set foldmethod=marker
set bg=light

highlight Pmenu      ctermfg=grey  ctermbg=darkblue
highlight PmenuSel   ctermfg=red   ctermbg=darkblue
highlight PmenuSbar  ctermbg=cyan
highlight PmenuThumb ctermfg=red

highlight WildMenu ctermfg=grey ctermbg=darkblue
highlight Folded     ctermbg=black ctermfg=darkgreen
highlight Search NONE ctermfg=lightred
autocmd InsertEnter * syn clear EOLWS | syn match EOLWS excludenl /\s\+\%#\@!$/
autocmd InsertLeave * syn clear EOLWS | syn match EOLWS excludenl /\s\+$/
hi EOLWS ctermbg=red
autocmd BufReadPost *
\  if line("'\"") > 0 && line("'\"") <= line("$") |
\    exe "normal g`\"" |
\  endif
autocmd BufNewFile *.pm silent 0read ~/.vim/skeletons/module.pm | call Modulify('::') | normal G3k

autocmd BufNewFile *.pl silent 0read ~/.vim/skeletons/perl.pl | normal G
autocmd BufNewFile *.t silent 0read ~/.vim/skeletons/test.t | normal G
autocmd BufNewFile Makefile.PL silent undo | silent 0read ~/.vim/skeletons/Makefile.PL | normal gg

autocmd BufNewFile *.c  silent 0read ~/.vim/skeletons/c.c | normal 4j$

autocmd BufReadPost *.smc set bin | set noeol
au BufWritePost *.{sh,pl} silent exe "!chmod +x %"
autocmd BufWritePost ~/devel/conf/* call DarcsUpdate()

autocmd BufWritePost ~/.vim/* call DarcsUpdate()

autocmd BufWritePost ~/.vimrc call DarcsUpdate()
autocmd BufWritePost ~/.zshrc call DarcsUpdate()
autocmd BufWritePost ~/.screenrc call DarcsUpdate()
autocmd BufWritePost ~/.re.pl/repl.rc call DarcsUpdate()
autocmd BufWritePost ~/.zshcomplete call DarcsUpdate()
autocmd FileType perl setlocal makeprg=$VIMRUNTIME/tools/efm_perl.pl\ -c\ %\ $*
autocmd FileType perl setlocal errorformat=%f:%l:%m
autocmd FileType perl setlocal keywordprg=perldoc\ -f
inoremap <silent> <C-a> <ESC>u:set paste<CR>.:set nopaste<CR>gi
iabbrev lamdba lambda
iabbrev dvice device
imap \tbl local $Test::Builder::Level = $Test::Builder::Level + 1;
nmap <Space> i <Esc>r

nmap Y y$

nnoremap \\ \
nmap \/ :nohl<CR>
nmap \n :set invnumber<CR>
nmap \c :make<CR>

nmap \ss :syntax sync fromstart<CR>
nmap \sm :set syn=mason<CR>:syntax sync fromstart<CR>
nmap \sp :set syn=perl<CR>:syntax sync fromstart<CR>

nmap ds :%s/\s\+$//<CR>

autocmd FileType help nnoremap <buffer> <CR> <C-]>
autocmd FileType help nnoremap <buffer> <BS> <C-T>

nmap \da  :execute 'w  <bar> !darcs add %'<CR>
nmap \dA  :execute 'wa <bar> !darcs amend-record'<CR>
nmap \dr  :execute 'wa <bar> !darcs record'<CR>
nmap \dR  :execute 'w  <bar> !darcs record %'<CR>
nmap \dn  :execute 'wa <bar> !darcs whatsnew   <bar> less'<CR>
nmap \dN  :execute 'w  <bar> !darcs whatsnew % <bar> less'<CR>
nmap \dd  :execute 'wa <bar> !darcs diff -u    <bar> less'<CR>
nmap \dD  :execute 'w  <bar> !darcs diff -u %  <bar> less'<CR>
nmap \dc  :execute '!darcs changes             <bar> less'<CR>
nmap \dqm :execute '!darcs query manifest      <bar> less'<CR>
nmap \dt  :execute '!darcs tag'<CR>
nmap \dp  :execute '!darcs push'<CR>
nmap \du  :execute '!darcs unrecord'<CR>
nmap \db  :execute "w <bar> :execute '!darcs revert %'   <bar> :silent execute 'e'"<CR>
nmap \dB  :execute "w <bar> :execute '!darcs unrevert %' <bar> :silent execute 'e'"<CR>

nmap <Right> :bn<CR>
nmap <Left>  :bp<CR>

vnoremap < <gv
vnoremap > >gv

nmap <silent> gw "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<cr><c-o><c-l>:nohl<CR>

nmap n nzz
nmap N Nzz
nmap * *zz
nmap # #zz
nmap g* g*zz
nmap g# g#zz

function s:nopaste(visual)
    if a:visual
        silent exe "normal gv!nopaste -x\<CR>"
    else
        let pos = getpos('.')
        silent exe "normal gg!Gnopaste -x\<CR>"
    endif
    silent undo
    if a:visual
        normal gv
    else
        call setpos('.', pos)
    endif
    echo @n
endfunction
nmap <silent> \p :call <SID>nopaste(0)<CR>
vmap <silent> \p :<C-U>call <SID>nopaste(1)<CR>
function s:spell()
    if !exists("s:spell_check") || s:spell_check == 0
        echo "Spell check on"
        let s:spell_check = 1
        setlocal spell spelllang=en_us
    else
        echo "Spell check off"
        let s:spell_check = 0
        setlocal spell spelllang=
    endif
endfunction
map <F11> :call <SID>spell()<CR>
imap <F11> <C-o>:call <SID>spell()<CR>
fun DarcsUpdate()
    try
        silent !cd /home/sartak/devel/conf/ && darcs record && darcs push
    finally
        redraw!
    endtry
endfun

fun Modulify(replace)
    exec "/Foo"
    silent :.s#Foo#\=expand("%")#
    silent :.s#\.pm;#;#
    silent :.s#lib/##e
    silent :.s# /# #e
    silent :.s#/#\=a:replace#ge
endfun
let g:Textobj_regex_enable = 1
let g:Textobj_fold_enable = 1
let g:Textobj_arg_enable = 1
let g:Foldtext_enable = 1
let g:Foldtext_tex_enable = 1
let g:Foldtext_cpp_enable = 1
let g:Foldtext_perl_enable = 1
au BufNewFile,BufReadPost *.asl set ft=ruby


function! PerlDoc()
  normal yy
  let l:this = @
  if match(l:this, '^ *\(use\|require\) ') >= 0
    exe ':5new'
    let l:this = substitute(l:this, '^ *\(use\|require\) *', "", "")
    let l:this = substitute(l:this, ";.*", "", "")
    let l:this = substitute(l:this, " .*", "", "")
    exe ':0r!perldoc -T ' . l:this . ' | uncolor.pl'
    exe ':0'
    exe ':echo "test"'
    exe ':set ft=man'
    return
  endif
  normal yiw
  exe ':new'
  exe ':resize'
  exe ':0r!perldoc -Tf ' . @
  exe ':0'
endfunction

map ,h :call PerlDoc()<C-M>:set nomod<C-M>
map ,h :call PerlDoc()<C-M>:set nomod<C-M>

map \s :set spell<C-M>
map \S :set nospell<C-M>
map \css I/* <ESC>A */<ESC>
map \ucss ^3x$5x
let g:Tex_DefaultTargetFormat = 'pdf'

nmap H ^
vmap H ^
nmap L $
vmap L $

nmap <Right> :bn<CR>
nmap <Left>  :bp<CR>
nmap <Up> :bf<CR>
nmap <Down>  :bl<CR>
nmap gb A {<CR>}<Esc>k
nmap <CR> o<Esc>
nmap <F1> <Esc>
inoremap <F1> <Esc>
imap <C-J> <Esc>

