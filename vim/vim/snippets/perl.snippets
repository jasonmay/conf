# #!/usr/bin/perl
snippet #!
	#!/usr/bin/env perl
	
snippet sub
	sub ${1:foo} {
		${2}
	}
snippet if
	if (${1:cond}) {
		${2}
	}
snippet elsif
	elsif (${1:cond}) {
		${2}
	}
snippet else
	else {
		${1}
	}
snippet for
	for my $${1:var} (${2:1..10}) {
		${3}
	}
snippet fora
	for my $${1:var} (@${2:array}) {
		${3}
	}
snippet while
	while (${1:cond}) {
		${2}
	}
snippet eval
	eval {${1}};
	if ($@) {
		${2}
	}
snippet st
	map  { $_->[0] }
	sort { $a->[1] ${3:cmp} $b->[1] }
	map  { [$_, ${2:function}] }
	${1:list}
snippet tbl
	local $Test::Builder::Level = $Test::Builder::Level + 1;
	
snippet ccl
	local $Carp::CarpLevel = $Carp::CarpLevel + 1;
	
snippet linc
	local $${1:a} = $$1 + ${2:1};
	${3}
#
# Moose
#
snippet class
	package ${1:`substitute(matchstr(expand("%"), '^lib/\zs.*\ze\.pm'), '/', '::', 'g')`};
	use Moose;

	${2}

	__PACKAGE__->meta->make_immutable;
	no Moose;

	1;
# XXX: ideally, this would be merged with the one above, but we need posthooks
# for that to happen. also, some way to get the extends line to update with
# the package line would be nice, maybe?
snippet subclass
	package ${1:`substitute(matchstr(expand("%"), '^lib/\zs.*\ze\.pm'), '/', '::', 'g')`};
	use Moose;
	extends '${2:`matchstr(substitute(matchstr(expand("%"), '^lib/\zs.*\ze\.pm'), '/', '::', 'g'), '.*\ze::.*')`}';

	${3}

	__PACKAGE__->meta->make_immutable;
	no Moose;

	1;
snippet has
	has ${1:attr} => (
		is  => '${2:ro}',
		isa => '${3:Str}',${4}
	);
	${5}
snippet hasl
	has ${1:attr} => (
		is         => '${2:ro}',
		isa        => '${3:Str}',
		lazy_build => 1,${4}
	);

	sub _build_$1 {
		my $self = shift;
		$5
	}
snippet m
	sub ${1:foo} {
		my $self = shift;
		${2}
	}
snippet around
	around ${1:foo} => sub {
		my $orig = shift;
		my $self = shift;
		${2}
	};
snippet after
	after ${1:foo} => sub {
		my $self = shift;
		${2}
	};
snippet before
	before ${1:foo} => sub {
		my $self = shift;
		${2}
	};
